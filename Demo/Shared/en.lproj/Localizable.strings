/* 
  Localizable.strings
  Demo

  Created by Yang Xu on 2022/3/16.
  
*/

// MARK: - Menu
"MenuNavigationTitle" = "Demo";
"MenuTip" = "Select Demo";

// MARK: - Queue type

"QueueTypeLinkLabel" = "Queue Type";
"QueueTypeDescription" = "The queue type will determine whether multiple views are allowed to exist in the container at the same time. This can be set in the container's configuration.";
"PushOneMessage" = "push one message";
"CurrentMessageID %lld" = "Current Message ID: %lld";
"PushButtonTip" = "Try tapping the button multiple times";
"MessageText %lld" = "Message ID: %lld   Tap Me To Dismiss";
"SliderOfNumberOfViewLabel %lld" = "Number of views can be displayed at the same time: %lld";
"SliderOfDelayForShowNext %@" = "Time interval to fetch the next view from the waiting queue : %@ secs";
"MultipleDescription" = "Display multiple views at the same time";
"OneByOneDescription" = "Only one view is displayed at a time, the new view will replace the showing one automatically";
"OneByOneWaitFinishDescription" = "Only one view is displayed at a time, show the next view after the previous view is dismissed";

// MARK: - Display type

"DisplayTypeLinkLabel" = "Display Type";
"HorizontalDescription" = "The views are arranged horizontally. Normally spacing is greater than 0, views do not overlap each other.";
"VerticalDescription" = "The views are arranged vertically, under normal conditions (spacing greater than 0), there is no overlap between views. Usually used to implement information tips at the top or bottom of the screen.";
"StackingDescription" = "Aligns the views along the Z-axis. Views will be stacked on the top of each other.";
"DisplayTypeDescription" = "The display type of the container view, this type will determine the layout of the container.";
"AddBlockButton" = "Show New View";
"DismissForStacking" = "Tap to dismiss";
"DismissForVertical" = "Tap or Swipe Down";
"DismissForHorizontal" = "Tap or Swipe Left";
"SliderOfSpace %@" = "spacing between views %@";
"ContainerMoreInfo" = "All container properties can be dynamically adjusted expect for name and queue type";
"ascending" = "Display on top";
"descending" = "Display on bottom";

// MARK: - View Configuration

"ViewConfigurationLabel" = "View Configuration";
"ViewConfigurationDescription" = "The user can set the view style and behavior within the container through the configuration of container view. For example: shadow, transition, dismissGesture, autoDismiss, alignment, animation, etc. If the view is not set, the container's default settings will be tried";
"AutoDismiss" = "Disappear in 2 seconds automatically";
"CreateNewRandomView" = "create random view styles";

// MARK: - Dismiss Gesture

"DismissGestureLabel" = "Dismiss Gesture";
"DismissGestureDescription" = "In addition to the above gestures, user can also add custom dismiss gesture via `.customGesture`";
"TapGesture" = "Tap to dismiss";
"DoubleTapGesture" = "Double tap to dismiss";
"LongPressGesture" = "Long press to dismiss";
"SwipeUpGesture" = "Swipe up to dismiss";
"SwipeLeftGesture" = "Swipe left to dismiss";
"SwipeRightGesture" = "Swipe right to dismiss";
"SwipeDownGesture" = "Swipe down to dismiss";

// MARK: - View Background

"ViewBackgroundLabel" = "Customizable Background";
"BlurBackground" = "Use material type";
"ColorBackground" = "Use color type";
"ViewBackground" = "Use a custom view";
"DisableBackground" = "No background";
"ViewBackgroundDescription" = "When using material type as background, only iOS 15, macOS 12, tvOS 15 and above are supported. TapToDismiss will be ignored when no background is used.\nIn vertical and horizontal modes, the container will use its own background configuration and ignore the view's background settings.";
"TapToDismiss" = "Tap on the background to dismiss the view";
"BgIgnoresSafeArea" = "Background Cancel Security Zone";

// MARK: - Bind Demo

"BindValueLabel" = "Use Bind Value";
"BindValueDescription" = "In other demos, we used calls to the environment value overlayContainer to display the view in the container. We can also do this using SwiftUI style modifiers.";
"Show %@" = "Show View %@";
"Dismiss %@" = "Dismiss view %@";
"IsPresentedStatus %@ %@" = "View %@'s isPresented is %@";
"View %@" = "View %@";

// MARK: - Controllable Animation

"ControllableAnimationLabel" = "Controllable Animation";
"ControllableAnimationDescription" = "By setting animated to false, you can prevent the view from animating when it is showed or dismissed. Useful for handling scenarios like Deep Link.";
"ShowWithAnimation" = "Show a view with animation";
"ShowWithoutAnimation" = "Show a view without animation";
"DismissWithoutAnimation" = "Dismiss all views without animation";
"DismissWithAnimation" = "Dismiss all views with animation";

// MARK: - Custom Menu
"CustomMenuLabel" = "Use NameSpace to locate the view";
"Transition1" = "Scale";
"Transition2" = "Opacity";
"PopMenu" = "Pop Menu";
"CustomMenuDescription" = "By using Namespace + ID, the position of the container view can be accurately positioned, and the custom menu can be realized with the correct transition, anchor point and other information. This logic also applies to scenarios such as beginner's guides, tips, etc.\n\n**Note**: Positioning the container view via matchedGeometryEffect will cause some transitions that generate displacement to fail (eg: slide, move, offset)";
"Item %lld" = "Item %lld";
